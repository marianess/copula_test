plot(hem.log$Ta181,hem.log$Nb93)
plot(hem.log$Nb93,hem.log$W182)
plot(hem.log$Co59,hem.log$Pb208)
plot(hem.log$V51,hem.log$GaAs75)
plot(hem.log$La139,hem.log$Ni60)
plot(hem.log$Mn55,hem.log$Ga69)
###############
#             #
# first pair  #
#             #
###############
# plot pairs
plot(hem.log$La139,hem.log$Ni60)
abline(lm(hem.log$La139~hem.log$Ni60),col='red',lwd=1)
cor(hem.log$La139,hem.log$Ni60,method='spearman')
# decide which copula to select
u <- pobs(as.matrix(hem.log$La139))
v <- pobs(as.matrix(hem.log$Ni60))
selectedCopula <- BiCopSelect(u,v,familyset=NA)
selectedCopula
# Bivariate copula: BB7
# (par = 1.12, par2 = 0.91, tau = 0.34)
# Bivariate normal
# create a 2D tCopul. pobs() converts data to uniform d.
n.cop <- normalCopula(dim=2)
set.seed(500)
m <-pobs(as.matrix(cbind(hem.log$La139,hem.log$Ni60)))
# fitting copula
fit <- fitCopula(n.cop,m,method='ml')
rho = coef(fit)[1]
persp(normalCopula(dim=2,rho),dCopula)
rho
# plot pairs
plot(hem.log$Mn55,hem.log$Ga69)
abline(lm(hem.log$Mn55~hem.log$Ga69),col='red',lwd=1)
cor(hem.log$Mn55,hem.log$Ga69,method='pearson')
# decide which copula to select
u <- pobs(as.matrix(hem.log$Mn55))
v <- pobs(as.matrix(hem.log$Ga69))
selectedCopula <- BiCopSelect(u,v,familyset=NA)
selectedCopula
# Bivariate copula: Rotated Tawn type 2 180 degrees
# (par = 1.64, par2 = 0.16, tau = 0.11)
# Bivariate normal
# create a 2D tCopul. pobs() converts data to uniform d.
n.cop <- normalCopula(dim=2)
set.seed(500)
m <-pobs(as.matrix(cbind(hem.log$Mn55,hem.log$Ga69)))
# fitting copula
fit <- fitCopula(n.cop,m,method='ml')
rho = coef(fit)[1]
persp(normalCopula(dim=2,rho),dCopula)
library(compositions)
library(copula)
library(VineCopula)
library(dplyr)
hem <- read.csv("hem_sorted.txt", header=TRUE, sep="\t")
hem <- hem %>% filter(Drillhole != "RD1988")
hem.log <- log1p(hem[,8:53])
# plot pairs
plot(hem.log$Mn55,hem.log$Ga69)
abline(lm(hem.log$Mn55~hem.log$Ga69),col='red',lwd=1)
cor(hem.log$Mn55,hem.log$Ga69,method='pearson')
# decide which copula to select
u <- pobs(as.matrix(hem.log$Mn55))
v <- pobs(as.matrix(hem.log$Ga69))
selectedCopula <- BiCopSelect(u,v,familyset=NA)
selectedCopula
# Bivariate copula: Rotated Tawn type 2 180 degrees
# (par = 1.64, par2 = 0.16, tau = 0.11)
# Bivariate normal
# create a 2D tCopul. pobs() converts data to uniform d.
n.cop <- normalCopula(dim=2)
set.seed(500)
m <-pobs(as.matrix(cbind(hem.log$Mn55,hem.log$Ga69)))
# fitting copula
fit <- fitCopula(n.cop,m,method='ml')
rho = coef(fit)[1]
persp(normalCopula(dim=2,rho),dCopula)
rho
rho
# Try to fit bivariate copula to
# max data. choise of
# elements is arbitrary as
# the goal is to learn R routine.
library(compositions)
library(copula)
library(VineCopula)
library(dplyr)
hem <- read.csv("hem_sorted.txt", header=TRUE, sep="\t")
hem <- hem %>% filter(Drillhole != "RD1988")
hem.log <- log1p(hem[,8:53])
# plot several scatterplots to choose
# variables for expiremental moelling
plot(hem.log$Ta181,hem.log$Nb93)
plot(hem.log$Nb93,hem.log$W182)
plot(hem.log$Co59,hem.log$Pb208)
plot(hem.log$V51,hem.log$GaAs75)
plot(hem.log$La139,hem.log$Ni60)
plot(hem.log$Mn55,hem.log$Ga69)
###############
#             #
# first pair  #
#             #
###############
# plot pairs
plot(hem.log$La139,hem.log$Ni60)
abline(lm(hem.log$La139~hem.log$Ni60),col='red',lwd=1)
cor(hem.log$La139,hem.log$Ni60,method='spearman')
# decide which copula to select
u <- pobs(as.matrix(hem.log$La139))
v <- pobs(as.matrix(hem.log$Ni60))
selectedCopula <- BiCopSelect(u,v,familyset=NA)
selectedCopula
# Bivariate copula: BB7
# (par = 1.12, par2 = 0.91, tau = 0.34)
# Bivariate normal
# create a 2D tCopul. pobs() converts data to uniform d.
n.cop <- normalCopula(dim=2)
set.seed(500)
m <-pobs(as.matrix(cbind(hem.log$La139,hem.log$Ni60)))
# fitting copula
fit <- fitCopula(n.cop,m,method='ml')
rho = coef(fit)[1]
persp(normalCopula(dim=2,rho),dCopula)
# build copula and sample from it 454 samples
u<- rCopula(454, normalCopula(dim=2,rho))
plot(u[,1],u[,2],pch='.', col="darkblue")
cor(u, method='spearman')
# model the margnals
La_mu <- mean(hem.log$La139)
La_sd <- sd(hem.log$La139)
Ni_mu <- mean(hem.log$Ni60)
Ni_sd <- sd(hem.log$Ni60)
# hist 1
g <- hem.log$La139
hist(g, density=20, breaks=10, prob=TRUE,
xlab="La", ylim=c(0, 0.7),
main="normal curve over histogram")
curve(dnorm(x, mean=La_mu, sd=La_sd),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
# hist 2
g <- hem.log$Ni60
hist(g, density=20, breaks=10, prob=TRUE,
xlab="Ni", ylim=c(0, 0.8),
main="normal curve over histogram")
curve(dnorm(x, mean=Ni_mu, sd=Ni_sd),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
# simulate data
copula_dist <- mvdc(copula=normalCopula(rho,dim=2), margins=c("norm","norm"),
paramMargins=list(list(mean=La_mu, sd=La_sd),
list(mean=Ni_mu, sd=Ni_mu)))
sim <- rMvdc(454,copula_dist)
# plotting results
plot(hem.log$La139,hem.log$Ni60,main='observed')
points(sim[,1],sim[,2],col='red')
legend('bottomright',c('Observed','Simulated'),col=c('black','red'),pch=21)
rho
library(MASS)
# Transformation function
transform_bc <- function(y, lambda = seq(-2,2,0.01), eps = 0.02) {
bc = boxcox(y ~ 1, lambda = lambda, eps = eps, interp = FALSE)
i = which.max(bc$y)
lam = bc$x[i]
print(lam)
if (abs(lam) < abs(eps)){
return(log(y))# added + 1 to avoid error due to zeros
} else {
return(((y)^lam - 1)/lam)
}
}
library(compositions)
library(copula)
library(VineCopula)
library(dplyr)
library(VIM)
library(ggplot2)
# read data in and impute missing values
hem <- read.csv("hem_sorted.txt", header=TRUE, sep="\t")
average <- sapply(hem[,8:53],mean,na.rm=TRUE)
hem.imp <- kNN(hem[,8:53],
variable = c('P31','As75','Sr88','Zr90','Sb121','Ba137','Hf178', 'Ta181'),
k = 1, numFun = median)
average.imp <- sapply(hem.imp[,1:46],mean)
dif<- average - average.imp
# drop columns and rename
hem.imp <- subset(hem.imp,select=-c(P31_imp,Ta181_imp,As75_imp,Sr88_imp,
Zr90_imp,Sb121_imp,Ba137_imp,Hf178_imp))
hem.log <- log1p(hem.imp[,1:46])
hem.log[,47:53] <- hem[,1:7]
library(compositions)
library(copula)
library(VineCopula)
library(dplyr)
library(VIM)
library(ggplot2)
# read data in and impute missing values
hem <- read.csv("hem_sorted.txt", header=TRUE, sep="\t")
#average <- sapply(hem[,8:53],mean,na.rm=TRUE)
hem.imp <- kNN(hem[,8:53],
variable = c('P31','As75','Sr88','Zr90','Sb121','Ba137','Hf178', 'Ta181'),
k = 1, numFun = median)
#average.imp <- sapply(hem.imp[,1:46],mean)
#dif<- average - average.imp
# drop columns and rename
hem.imp <- subset(hem.imp,select=-c(P31_imp,Ta181_imp,As75_imp,Sr88_imp,
Zr90_imp,Sb121_imp,Ba137_imp,Hf178_imp))
hem.log <- log1p(hem.imp[,1:46])
hem.log[,47:53] <- hem[,1:7]
library(MASS)
# Transformation function
transform_bc <- function(y, lambda = seq(-2,2,0.01), eps = 0.02) {
bc = boxcox(y ~ 1, lambda = lambda, eps = eps, interp = FALSE)
i = which.max(bc$y)
lam = bc$x[i]
print(lam)
if (abs(lam) < abs(eps)){
return(log(y))# added + 1 to avoid error due to zeros
} else {
return(((y)^lam - 1)/lam)
}
}
summary(hem.imp)
df.bx = data.frame(apply(hem.imp,2,transform_bc))
summary(hem.imp)
df.bx = data.frame(apply(hem.imp,2,transform_bc))
df.temp <- hem.imp+1
df.bx = data.frame(apply(df.temp,2,transform_bc))
df.bx[,47:54]<- hem[,1:7]
hem.crs <- hem.bx %>% filter(Texture == 'Coarse Hm with U-min inclusions')
hem.crs <- df.bx %>% filter(Texture == 'Coarse Hm with U-min inclusions')
# plot pairs
p <- hem.crs %>% ggplot(aes(x=W182, y=U238))+geom_point()+geom_smooth(method='lm')
p
cor(hem.crs$W182,hem.crs$U238,method='spearman')
# plot pairs
p <- hem.crs %>% ggplot(aes(x=W182, y=Mo95))+geom_point()+geom_smooth(method='lm')
cor(hem.crs$W182,hem.crs$Mo95,method='spearman')
# calculate mean and sd for edf
W_mu <- mean(hem.crs$W182)
W_sd <- sd(hem.crs$W182)
Mo_mu <- mean(hem.crs$Mo95)
Mo_sd <- sd(hem.crs$Mo95)
# hist 1
g <- hem.crs$W182
hist(g, density=20, breaks=20, prob=TRUE,
xlab="W", ylim=c(0, 1),
main="normal curve over histogram")
curve(dnorm(x, mean=W_mu, sd=W_sd),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
# hist 2
g <- hem.crs$Mo95
hist(g, density=20, breaks=20, prob=TRUE,
xlab="Mo", ylim=c(0, 1.8),
main="normal curve over histogram")
curve(dnorm(x, mean=Mo_mu, sd=Mo_sd),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
# decide which copula to select
u <- pobs(as.matrix(hem.crs$W182))
v <- pobs(as.matrix(hem.crs$Mo95))
selectedCopula <- BiCopSelect(u,v,familyset=NA)
selectedCopula
plot(u,v)
# Bivariate copula: t (par = 0.7, par2 = 2.62, tau = 0.49)
# create a 2D tCopula
t.cop <- tCopula(dim=2)
set.seed(500)
m <- pobs(as.matrix(cbind(hem.crs$W182,hem.crs$Mo95)))
# fitting copula
fit <- fitCopula(t.cop,m,method='ml')
# Find and save the coefficients
coef(fit)
trho = coef(fit)[1]
tdf  = coef(fit)[2]
persp(normalCopula(dim=2,rho),dCopula)
persp(tCopula(trho, dim = 2, df = tdf),dCopula)
contour(tCopula(trho, dim = 2, df = tdf),dCopula, main = "Student t")
# build copula and sample from it 253 samples
C <- rCopula(253, tCopula(dim=2,trho,df=tdf))
plot(C[,1],C[,2],pch='.', col="darkblue")
cor(C, method='spearman')
# simulate data
copula_dist <- mvdc(copula=tCopula(dim=2,trho,df=tdf), margins=c("norm","norm"),
paramMargins=list(list(mean=W_mu, sd=W_sd),
list(mean=Mo_mu, sd=Mo_mu)))
sim <- rMvdc(253,copula_dist)
# plotting results
plot(hem.crs$W182,hem.crs$Mo95,main='observed')
points(sim[,1],sim[,2],col='red')
legend('bottomright',c('Observed','Simulated'),col=c('black','red'),pch=21)
# goodness of fit test
mydata <- cbind(hem.crs$W182,hem.crs$Mo95)
gf <- gofCopula(normalCopula(dim = 2), as.matrix(mydata), N = 50)
gf
# plot pairs
p <- hem.crs %>% ggplot(aes(x=W182, y=U238))+geom_point()+geom_smooth(method='lm')
p
cor(hem.crs$W182,hem.crs$U238,method='spearman')
# plot pairs
p <- hem.crs %>% ggplot(aes(x=W182, y=U238))+geom_point()+geom_smooth(method='lm')
cor(hem.crs$W182,hem.crs$U238,method='spearman')
# calculate mean and sd for edf
W_mu <- mean(hem.crs$W182)
W_sd <- sd(hem.crs$W182)
Mo_mu <- mean(hem.crs$U238)
Mo_sd <- sd(hem.crs$U238)
# hist 1
g <- hem.crs$W182
hist(g, density=20, breaks=20, prob=TRUE,
xlab="W", ylim=c(0, 1),
main="normal curve over histogram")
curve(dnorm(x, mean=W_mu, sd=W_sd),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
# hist 2
g <- hem.crs$U238
hist(g, density=20, breaks=20, prob=TRUE,
xlab="Mo", ylim=c(0, 1.8),
main="normal curve over histogram")
curve(dnorm(x, mean=Mo_mu, sd=Mo_sd),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
# hist 2
g <- hem.crs$U238
hist(g, density=20, breaks=20, prob=TRUE,
xlab="Mo", ylim=c(0, 0.4),
main="normal curve over histogram")
curve(dnorm(x, mean=Mo_mu, sd=Mo_sd),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
# hist 2
g <- hem.crs$U238
hist(g, density=20, breaks=20, prob=TRUE,
xlab="Mo", ylim=c(0, 0.1),
main="normal curve over histogram")
curve(dnorm(x, mean=Mo_mu, sd=Mo_sd),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
# hist 2
g <- hem.crs$U238
hist(g, density=20, breaks=20, prob=TRUE,
xlab="Mo", ylim=c(0, 0.06),
main="normal curve over histogram")
curve(dnorm(x, mean=Mo_mu, sd=Mo_sd),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
# decide which copula to select
u <- pobs(as.matrix(hem.crs$W182))
v <- pobs(as.matrix(hem.crs$U238))
selectedCopula <- BiCopSelect(u,v,familyset=NA)
selectedCopula
plot(u,v)
# decide which copula to select
u <- pobs(as.matrix(hem.crs$W182))
v <- pobs(as.matrix(hem.crs$U238))
plot(u,v)
# create a 2D tCopula
t.cop <- tCopula(dim=2)
set.seed(500)
m <- pobs(as.matrix(cbind(hem.crs$W182,hem.crs$U238)))
fit <- fitCopula(t.cop,m,method='ml')
coef(fit)
trho = coef(fit)[1]
tdf  = coef(fit)[2]
persp(tCopula(trho, dim = 2, df = tdf),dCopula)
contour(tCopula(trho, dim = 2, df = tdf),dCopula, main = "Student t")
# build copula and sample from it 253 samples
C <- rCopula(253, tCopula(dim=2,trho,df=tdf))
plot(C[,1],C[,2],pch='.', col="darkblue")
cor(C, method='spearman')
# simulate data
copula_dist <- mvdc(copula=tCopula(dim=2,trho,df=tdf), margins=c("norm","norm"),
paramMargins=list(list(mean=W_mu, sd=W_sd),
list(mean=Mo_mu, sd=Mo_mu)))
sim <- rMvdc(253,copula_dist)
# plotting results
plot(hem.crs$W182,hem.crs$U238,main='observed')
points(sim[,1],sim[,2],col='red')
legend('bottomright',c('Observed','Simulated'),col=c('black','red'),pch=21)
# goodness of fit test
mydata <- cbind(hem.crs$W182,hem.crs$U238)
gf <- gofCopula(normalCopula(dim = 2), as.matrix(mydata), N = 50)
gf
?aov
aov(hem.crs$U238~hem.osc$U238)
hem.osc <- hem.log %>% filter(Texture == "Oscillatory-zoned")
aov(hem.crs$U238~hem.osc$U238)
>?wilcox.test
>?wilcox.test
?wilcox.test
wilcox.test(hem.crs$W182, y = hem.osc$W182,
alternative = c("two.sided"), paired = FALSE, correct = TRUE)
wilcox.test(hem.crs$Sn118, y = hem.osc$Sn118,
alternative = c("two.sided"), paired = FALSE, correct = TRUE)
wilcox.test(hem.crs$Sn118, y = hem.osc$Sn118,
alternative = c("two.sided"), paired = FALSE)
wilcox.test(hem.crs$Lu175, y = hem.osc$Lu175,
alternative = c("two.sided"), paired = FALSE)
wilcox.test(hem.crs$Si29, y = hem.osc$Si29,
alternative = c("two.sided"), paired = FALSE)
wilcox.test(hem.crs$Sm147, y = hem.osc$Sm147,
alternative = c("two.sided"), paired = FALSE)
wilcox.test(hem.crs$Sm147~ y = hem.osc$Sm147,
alternative = c("two.sided"), paired = FALSE)
wilcox.test(hem.crs$Sm147~ y = hem.osc$Sm147,paired = FALSE)
wilcox.test(hem.crs$Sm147~ hem.osc$Sm147,
alternative = c("two.sided"), paired = FALSE)
wilcox.test(hem.crs$Sm147~ hem.osc$Sm147,paired = FALSE,alternative = c("two.sided"))
wilcox.test(x=hem.crs$Si29, y = hem.osc$Si29,
alternative = c("two.sided"), paired = FALSE)
library(reshape2)
test <- melt(df.bx,id.vars=c("Texture"))
test <- melt(df.bx,id.vars=c("id","Texture"))
View(test)
test <- as.data.frame(melt(df.bx,id.vars=c("id","Texture")))
wilcox.test(x=hem.crs$Hf178, y = hem.osc$Hf178,
alternative = c("two.sided"), paired = FALSE)
wilcox.test(x=hem.crs$Ni60, y = hem.osc$Ni60,
alternative = c("two.sided"), paired = FALSE)
w =wilcox.test(x=hem.crs$Hf178, y = hem.osc$Hf178,
alternative = c("two.sided"), paired = FALSE)
wilcox <-function(a,b){
result <- wilcox.test(x=a,y=b), alternative=c("two.sided"), paired = FALSE
return(result$p.value)
}
wilcox <-function(a,b){
result <- wilcox.test(x=a,y=b), alternative=c("two.sided"), paired = FALSE
return(result$p.value)}
wilcox <-function(a,b){
result <- wilcox.test(x=a,y=b), alternative=c("two.sided"), paired = FALSE
return(result(p.value))}
w
w$p.value
wilcox <-function(a,b){
result <- wilcox.test(x=a,y=b), alternative=c("two.sided"), paired = FALSE
return(result$p.value)}
wilcox <-function(a,b){
result <- (wilcox.test(x=a,y=b, alternative=c("two.sided"), paired = FALSE)
return(result$p.value)}
wilcox <-function(a,b){
result <- wilcox.test(x=a,y=b, alternative=c("two.sided"), paired = FALSE)
return(result$p.value)}
wilcox(hem.crs$Hf178,hem.osc$Hf178)
w.test_results <- mapply(wilcox, x= hem.crs, y = hem.osc, SIMPLIFY = F)
wilcox(hem.crs$Mg24,hem.osc$Mg24)
wilcox <-function(a,b){
result <- wilcox.test(x=a,y=b, alternative=c("two.sided"), paired = FALSE)
if (result$p.value>0.05){
return(paste("do not reject Ho"),result$p.value)
}
else{
return(paste("reject Ho"),result$p.value)
}
}
wilcox(hem.crs$Hf178,hem.osc$Hf178)
wilcox <-function(a,b){
result <- wilcox.test(x=a,y=b, alternative=c("two.sided"), paired = FALSE)
if (result$p.value>0.05){
paste("do not reject Ho")
return(result$p.value)
}
else{
paste("reject Ho")
return(result$p.value)
}
}
wilcox(hem.crs$Hf178,hem.osc$Hf178)
wilcox(hem.crs$Mg24,hem.osc$Mg24)
wilcox(hem.crs$Hf178,hem.osc$Hf178)
wilcox <-function(a,b){
result <- wilcox.test(x=a,y=b, alternative=c("two.sided"), paired = FALSE)
if (result$p.value>0.05){
print("do not reject Ho")
return(result$p.value)
}
else{
print("reject Ho")
return(result$p.value)
}
}
wilcox(hem.crs$Hf178,hem.osc$Hf178)
wilcox(hem.crs$Mg24,hem.osc$Mg24)
loop<-function(df1,df2){
for(i in df1[,1:46])
for(j in df2[,1:46])
return(i,j)
}
loop(hem.osc,hem.crs)
loop<-function(df1,df2){
for(i in df1[,1:46])
for(j in df2[,1:46])
return(c(i,j))
}
loop(hem.osc,hem.crs)
loop<-function(df1,df2){
for(i in df1[,1:46])
for(j in df2[,1:46])
return(c(i,j))
}
loop(hem.osc,hem.crs)
loop<-function(df1,df2){
for(i in df1[,1:46])
for(j in df2[,1:46])
vector1 <- df1[i]
vector2 <- df2[j]
return(c(vector1,vector2))
}
loop(hem.osc,hem.crs)
wilcox(hem.crs$Al27,hem.osc$Al27)
wilcox(hem.crs$Ti49,hem.osc$Ti49)
wilcox(hem.crs$V51,hem.osc$V51)
wilcox(hem.crs$Ni60,hem.osc$Ni60)
wilcox(hem.crs$Zr90,hem.osc$Zr90)
wilcox(hem.crs$Lu175,hem.osc$Lu175)
wilcox(hem.crs$Zr90,hem.rep$Zr90)
hem.rep <- hem.log %>% filter(Texture == "Hm - replacement carbonate? ")
wilcox(hem.crs$Zr90,hem.rep$Zr90)
